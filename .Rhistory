ages <- c(10, 11)
sum(ages)
sum(ages)
ages
siblings ,- data.frame(names, ages)
siblings <- data.frame(names, ages)
siblings <- data.frame(names, ages)
names <- c("Angharad", "Gareth")
siblings <- data.frame(names, ages)
view(friends)
View(siblings)
View(siblings)
View(friends)
str(siblings)
siblings$ages
siblings$names
View(starwars)
data()
View(women)
women%>%
## filter = filter the data (eg. below is to filter the set by height above 150cm and weight below 130)
filter(height > 150 & weight < 130) %>%
## mutate = to create a variable to a data frame while preserving any exisiting variables.
## In this case, to change cm into ft, you divide it by 30.48 (thx google) therefore creating a new variable
## called height in metres :)
mutate(height_in_metres = height/30.48) %>%
## select = this is how you tell R what variables you want to work with
select(height_in_metres, weight) %>%
##arrange = how you want to sort the data - smallest to biggest is default, but if you were to write
## " -Weight" instead, it would do it biggest to smallest.
arrange(weight) %>%
## View = always upper case V!
View()
women %>%
filter(weight < 130) %>%
mutate(height_in_metres = height/30.48) %>%
select(height_in_metres, weight) %>%
arrange(weight) %>%
View()
data()
View(women)
library(tidyverse)
## it basiclaly means 'and then...' so it takes what was just written and continues it onto the next line.
women %>%
## filter = filter the data (eg. below is to filter the set by height above 150cm and weight below 130)
filter(weight < 130) %>%
## mutate = to create a variable to a data frame while preserving any exisiting variables.
## In this case, to change cm into ft, you divide it by 30.48 (thx google) therefore creating a new variable
## called height in metres :)
mutate(height_in_metres = height/30.48) %>%
## select = this is how you tell R what variables you want to work with
select(height_in_metres, weight) %>%
##arrange = how you want to sort the data - smallest to biggest is default, but if you were to write
## " -Weight" instead, it would do it biggest to smallest.
arrange(weight) %>%
## View = always upper case V!
View()
plot()
#%>% = pipe operator, you can type it out normally or use shift, ctrl + m as a shortcut
## it basiclaly means 'and then...' so it takes what was just written and continues it onto the next line.
women %>%
## filter = filter the data (eg. below is to filter the set by height above 150cm and weight below 130)
filter(weight < 130) %>%
## mutate = to create a variable to a data frame while preserving any exisiting variables.
## In this case, to change cm into ft, you divide it by 30.48 (thx google) therefore creating a new variable
## called height in metres :)
mutate(height_in_metres = height/30.48) %>%
## select = this is how you tell R what variables you want to work with
select(height_in_metres, weight) %>%
##arrange = how you want to sort the data - smallest to biggest is default, but if you were to write
## " -Weight" instead, it would do it biggest to smallest.
arrange(weight) %>%
## View = always upper case V!
#View()
plot()
View(msleep)
## glimpse - good way to get a quick overview of the dataset at hand.
glimpse
glimpse(msleep)
## class - provides the type
## $name - provides you the variable you are looking at within the dataset - eg. class(msleep$name) gives you
##the class of the name variable (in this case, character)
class(msleep$name)
##length - the length of the dataframe
length(msleep)
## names - all of the names of the variables
names(msleep)
##unique(msleep$genus)
unique(msleep$genus)
##missing <- !complete.cases(msleep) - complete.cases() is a function
## that removes missing values in a vector, matrix, or data frame. if you do !complete.cases, it does the opposite!
## if you then asign this to an object called something sensible like 'missing', you now have an object
## that contains every row that is missing :)
missing <- !complete.cases(msleep)
print(missing)
sum(ages)
ages
print(ages)
ages <- c(10, 11)
sum(ages)
print(ages)
siblings <- data.frame(names, ages)
View(siblings)
ages <- c(10, 11, 13)
sum(ages)
print(ages)
names <- c("Angharad", "Gareth", "Alex")
siblings <- data.frame(names, ages)
View(siblings)
ages <- c(13, 11, 10)
sum(ages)
print(ages)
names <- c("Angharad", "Gareth", "Alex")
siblings <- data.frame(names, ages)
View(siblings)
str(siblings)
siblings$ages
siblings$names
data()
View(women)
## it basiclaly means 'and then...' so it takes what was just written and continues it onto the next line.
women %>%
## filter = filter the data (eg. below is to filter the set by height above 150cm and weight below 130)
filter(weight < 130) %>%
data()
library(tidyverse)
data()
View(women)
#%>% = pipe operator, you can type it out normally or use shift, ctrl + m as a shortcut
## it basiclaly means 'and then...' so it takes what was just written and continues it onto the next line.
women %>%
## filter = filter the data (eg. below is to filter the set by height above 150cm and weight below 130)
filter(weight < 130) %>%
data()
View(women)
library(tidyverse)
data()
View(women)
women %>%
## filter = filter the data (eg. below is to filter the set by height above 150cm and weight below 130)
filter(weight < 130) %>%
plot()
women %>%
## filter = filter the data (eg. below is to filter the set by height above 150cm and weight below 130)
filter(weight < 130) %>%
## mutate = to create a variable to a data frame while preserving any exisiting variables.
## In this case, to change cm into ft, you divide it by 30.48 (thx google) therefore creating a new variable
## called height in metres :)
mutate(height_in_metres = height/30.48) %>%
## select = this is how you tell R what variables you want to work with
select(height_in_metres, weight) %>%
##arrange = how you want to sort the data - smallest to biggest is default, but if you were to write
## " -Weight" instead, it would do it biggest to smallest.
arrange(weight) %>%
## View = always upper case V!
#View()    ## remove the # to use - for some reason you can only use one at a time?
plot()
